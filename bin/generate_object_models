#!/usr/bin/env ruby

# Copyright 2025 Pixar

#
#    Licensed under the Apache License, Version 2.0 (the "Apache License")
#    with the following modification; you may not use this file except in
#    compliance with the Apache License and the following modification to it:
#    Section 6. Trademarks. is deleted and replaced with:
#
#    6. Trademarks. This License does not grant permission to use the trade
#       names, trademarks, service marks, or product names of the Licensor
#       and its affiliates, except as required to comply with Section 4(c) of
#       the License and to reproduce the content of the NOTICE file.
#
#    You may obtain a copy of the Apache License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the Apache License with the above modification is
#    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#    KIND, either express or implied. See the Apache License for the specific
#    language governing permissions and limitations under the Apache License.
#
#

# frozen_string_literal: true

#
# Swagger schema to Object Model and Enum constants
#
# VERY USEFUL: https://swagger.io/docs/specification/data-models/data-types/
#
###############################################
require 'pathname'
require 'fileutils'
require 'json'
require 'base64'
require 'open3'

# Our App
class App

  COPYRIGHT_NOTICE = <<~END_NOTICE
    # Copyright #{Time.now.year} Pixar
    #
    #    Licensed under the Apache License, Version 2.0 (the "Apache License")
    #    with the following modification; you may not use this file except in
    #    compliance with the Apache License and the following modification to it:
    #    Section 6. Trademarks. is deleted and replaced with:
    #
    #    6. Trademarks. This License does not grant permission to use the trade
    #       names, trademarks, service marks, or product names of the Licensor
    #       and its affiliates, except as required to comply with Section 4(c) of
    #       the License and to reproduce the content of the NOTICE file.
    #
    #    You may obtain a copy of the Apache License at
    #
    #        http://www.apache.org/licenses/LICENSE-2.0
    #
    #    Unless required by applicable law or agreed to in writing, software
    #    distributed under the Apache License with the above modification is
    #    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    #    KIND, either express or implied. See the Apache License for the specific
    #    language governing permissions and limitations under the Apache License.
    #
  END_NOTICE

  JAMF_PRO_URL_FILE = Pathname.new('/tmp/generate_opi_objects_jamf_pro_url')
  JAMF_PRO_ACCESS_FILE = Pathname.new('/tmp/generate_opi_objects_jamf_pro_access')

  OAPI_SCHEMA_URL_PATH = 'api/schema'

  # The rb files for the subclasses of OAPIObject are written here.
  OAPI_DIR = Pathname.new(__FILE__).parent.parent + 'lib/jamf/api/jamf_pro/oapi_schemas'

  # This module is the namespace, of all the OAPI classes we're creating.
  OAPIOBJECT_NAMESPACE = 'OAPISchemas'

  # This is the superclass of all the OAPI classes we're creating.
  OAPIOBJECT_SUPERCLASS = 'OAPIObject'

  # Strings holding timestamps have this in their 'format:' value
  DATE_TIME_FORMAT = 'date-time'

  # Not all Timestamp Strings in the schema are properly marked as 'format: date-time'
  # But we can still catch any that have an example that matches this Regexp
  DATE_TIME_EXAMPLE_RE = /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d\d\d)|Z)?$/.freeze

  # The placeholder for the class names we're automatically generating.
  # e.g. class OAPIObject::XyzAbc < OAPIObject, this is 'XyzAbc'
  OAPIOBJECT_SUBCLASS_NAME_PLACEHOLDER = 'OAPI_SUBCLASS_NAME_GOES HERE'

  # Any enums defined for this object will be inserted here.
  ENUM_CONSTS_PLACEHOLDER = 'ENUM_CONSTANTS_GO_HERE'

  # Enum constants will be named for the property that uses them
  # with this suffix. E.g. if a a property called 'deviceType' has
  # an enum listing the allowed values, that enum will be in the
  # constant DEVICE_TYPE_OPTIONS
  ENUM_CONST_SUFFIX = '_OPTIONS'

  # Each subclass of OAPIObject that has an Object as its 'type' will have
  # this constant defining the properites of the json object, which will
  # become the attributes of the subclass, with autotmatically created
  # getters and setters, with basic validation.
  OAPI_PROPERTIES_CONST_NAME = 'OAPI_PROPERTIES'

  # the OAPI_PROPERTIES constant for this object will be inserted here
  OAPI_PROPERTIES_CONST_PLACEHOLDER = 'OBJECT_MODEL_CONSTANT_GOES_HERE'

  # These will be populated with various documentary comments
  JAMF_PRO_VERSION_PLACEHOLDER = 'JAMF_PRO_VERSION_GOES_HERE'
  OAPI_DESC_PLACEHOLDER = 'OAPI_DESC_GOES_HERE'
  PRIVS_PLACEHOLDER = 'OBJECT_PRIVS_GO_HERE'
  CONTAINERS_PLACEHOLDER = 'OBJECT_CONTAINTERS_GO_HERE'
  SUB_MODELS_PLACEHOLDER = 'OBJECT_SUB_MODELS_GO_HERE'

  # The template for the ruby files we will write
  OAPIOBJECT_FILE_TEMPLATE = <<~END_TEMPLATE
    #{COPYRIGHT_NOTICE}

    module Jamf

      # This module is the namespace for all objects defined
      # in the OAPI JSON schema under the components => schemas key
      #
      module #{OAPIOBJECT_NAMESPACE}


        # OAPI Object Model and Enums for: #{OAPIOBJECT_SUBCLASS_NAME_PLACEHOLDER}
        #
        #{OAPI_DESC_PLACEHOLDER}
        #
        # This class was automatically generated from the #{OAPI_SCHEMA_URL_PATH}
        # URL path on a Jamf Pro server version #{JAMF_PRO_VERSION_PLACEHOLDER}
        #
        # This class may be used directly, e.g instances of other classes may
        # use instances of this class as one of their own properties/attributes.
        #
        # It may also be used as a superclass when implementing Jamf Pro API
        # Resources in ruby-jss. The subclasses include appropriate mixins, and
        # should expand on the basic functionality provided here.
        #
        #
        # Container Objects:
        # Other object models that use this model as the value in one
        # of their attributes.
        #{CONTAINERS_PLACEHOLDER}
        #
        # Sub Objects:
        # Other object models used by this model's attributes.
        #{SUB_MODELS_PLACEHOLDER}
        #
        # Endpoints and Privileges:
        # API endpoints and HTTP operations that use this object
        # model, and the Jamf Pro privileges needed to access them.
        #{PRIVS_PLACEHOLDER}
        #
        #
        class #{OAPIOBJECT_SUBCLASS_NAME_PLACEHOLDER} < Jamf::#{OAPIOBJECT_SUPERCLASS}

          #{ENUM_CONSTS_PLACEHOLDER}

          #{OAPI_PROPERTIES_CONST_PLACEHOLDER}

        end # class #{OAPIOBJECT_SUBCLASS_NAME_PLACEHOLDER}

      end # module #{OAPIOBJECT_NAMESPACE}

    end # module Jamf
  END_TEMPLATE

  DOTRB = '.rb'

  # Set up
  ##############################
  def initialize
    @prompt_for_creds = ARGV.delete '--prompt'
  end

  # DO it
  ##############################
  def run
    setup

    @api_definition = JSON.parse(`curl -sf '#{swagger_schema_url}'`, symbolize_names: true)

    @api_definition[:components][:schemas].each do |object_name, object_schema|
      process_oapi_object object_name, object_schema
    end
  end # run

  # Set up for running
  def setup
    # this will prompt for the URL if needed,
    # and will always prompt for auth credentials to GET the version of the server
    puts "Generating OAPI classes from the Jamf Pro API version: #{jamf_pro_version}"

    OAPI_DIR.rmtree if OAPI_DIR.exist?
    OAPI_DIR.mkpath
  end

  # get the server version, prompting and storing it if needed
  def jamf_pro_version
    return @jamf_pro_version if @jamf_pro_version

    cmd = ['/usr/bin/curl']
    cmd << '--request'
    cmd << 'GET'
    cmd << '--url'
    cmd << jamf_pro_version_url
    cmd << '--header'
    cmd << 'Accept: application/json'
    cmd << '--header'
    cmd << "Authorization: Bearer #{jamf_pro_token}"
    sout, _serr, _status = Open3.capture3(*cmd)

    @jamf_pro_version = JSON.parse(sout)['version']
  end

  # get the server url, prompting and storing it if needed
  def jamf_pro_url(prompt: false)
    @jamf_pro_url = nil if prompt
    return @jamf_pro_url if @jamf_pro_url

    if JAMF_PRO_URL_FILE.readable?
      @jamf_pro_url = JAMF_PRO_URL_FILE.read.chomp
      return @jamf_pro_url
    end

    puts 'Enter the URL for your Jamf Pro server'
    print 'e.g. https://myjamf.myschool.edu/: '
    @jamf_pro_url = gets.chomp
    @jamf_pro_url << '/' unless @jamf_pro_url.end_with? '/'
    JAMF_PRO_URL_FILE.open('w') { |f| f.write @jamf_pro_url }
    @jamf_pro_url
  end

  # The  JPAPI url to authenticate and get a token
  def jamf_pro_token_url
    @token_url ||= "#{jamf_pro_url}api/v1/auth/token"
  end

  # The version JPAPI url
  def jamf_pro_version_url
    @version_url ||= "#{jamf_pro_url}api/v1/jamf-pro-version"
  end

  # The swagger schema url
  def swagger_schema_url
    @schema_url ||= "#{jamf_pro_url}#{OAPI_SCHEMA_URL_PATH}"
  end

  # get a token to use for getting the version
  def jamf_pro_token
    return @token if @token

    cmd = ['/usr/bin/curl']
    cmd << '--request'
    cmd << 'POST'
    cmd << '--url'
    cmd << jamf_pro_token_url
    cmd << '--header'
    cmd << 'Accept: application/json'
    cmd << '--header'
    cmd << "Authorization: Basic #{jamf_creds}"
    sout, _serr, _status = Open3.capture3(*cmd)

    @token = JSON.parse(sout)['token']
    raise 'Could not get Jamf Pro API token - bad user/passwd?' unless @token

    @token
  end

  # auth creds for connecting to the JPAPI to get the token
  # to get the version
  # returns the data Base64 enccoded for the Authorization header of the token request
  def jamf_creds(prompt: @prompt_for_creds)
    JAMF_PRO_ACCESS_FILE.delete if prompt && JAMF_PRO_ACCESS_FILE.file?
    return JAMF_PRO_ACCESS_FILE.read.chomp if JAMF_PRO_ACCESS_FILE.file?

    print "Enter a username for #{jamf_pro_url}: "
    jpapi_user = $stdin.gets.chomp
    begin
      $stdin.reopen '/dev/tty' unless $stdin.tty?
      $stderr.print "Enter the password for #{jpapi_user}: "
      system '/bin/stty -echo'
      jpapi_pw = $stdin.gets.chomp("\n")
      puts
    ensure
      system '/bin/stty echo'
    end # begin

    creds = Base64.encode64("#{jpapi_user}:#{jpapi_pw}").chomp
    FileUtils.touch JAMF_PRO_ACCESS_FILE
    JAMF_PRO_ACCESS_FILE.chmod 0o0600
    JAMF_PRO_ACCESS_FILE.open('w') { |f| f.write creds }
    creds
  end

  # process for object models
  #
  # @param class_name [Symbol] one of the keys from the oapi json components => schemas
  #   e.g. :InventoryPreloadRecordV2
  #
  # @param object_schema [Hash] the value for the object_name - a Hash defining the object
  #    must have a :type key
  ##############################
  def process_oapi_object(class_name, object_schema)
    oapi_object_class_file = class_file_from_class_name(class_name)
    puts "Doing #{OAPIOBJECT_SUPERCLASS} subclass #{class_name}"
    puts "  file #{oapi_object_class_file}"

    file_contents = class_file_contents(class_name, object_schema)
    return if file_contents.to_s.empty?

    oapi_object_class_file.open('w') { |f| f.write file_contents }
  end

  # e.g. '/path/to/file/app_dynamics_config.rb' from 'AppDynamicsConfig'
  # uppercase letters become lowercased and prefixed with an underscore.
  #
  # returns a pathname to the file
  ##############################
  def class_file_from_class_name(class_name)
    fn = class_name.to_s.split('').map { |c| c =~ /[A-Z]/ ? "_#{c}" : c }.join[1..].downcase
    OAPI_DIR + "#{fn}#{DOTRB}"
  end

  # e.g. 'APP_DYNAMICS_CONFIG' from 'AppDynamicsConfig'
  ##############################
  def const_name_from_object_name(object_name)
    name = object_name.to_s.split('').map { |c| c =~ /[A-Z]/ ? "_#{c}" : c }.join
    name = name[1..] if name.start_with? '_'
    name.upcase
  end

  # e.g. 'AppDynamicsConfig' from 'APP_DYNAMICS_CONFIG'
  ##############################
  def module_name_from_const_name(name)
    name.split('_').map(&:capitalize).join
  end

  # find all the paths that use this object and note the privs needed
  # and build a Hash constant with them
  def privs_for_object(object_name)
    paths = []
    @api_definition[:paths].each do |path, pathdef|
      pathdef.each do |operation, opdef|
        xpriv = opdef[:'x-required-privileges'].dup
        xpriv ||= ['Unknown']
        xpriv = [xpriv] if xpriv.is_a?(String)

        priv_array_str = +"\n    #    - "
        priv_array_str << xpriv.join("\n    #    - ")

        # operation responses
        opdef[:responses].each do |code, resp|
          next unless code.to_s.start_with? '2'
          next unless schema_contains_obj object_name, resp.dig(:content, :"application/json", :schema)

          paths << "#  - '#{path}:#{operation.to_s.upcase}' needs permissions:#{priv_array_str}"
        end

        # operation request
        next unless schema_contains_obj object_name, opdef.dig(:requestBody, :content, :"application/json", :schema)

        paths << "#  - '#{path}:#{operation.to_s.upcase}' needs permissions:#{priv_array_str}"
      end # pathdef.each
    end; # @api_definition[:paths].each

    paths.compact!
    paths.uniq!

    return '#' if paths.empty?

    paths.join "\n    "
  end

  ############################
  def schema_contains_obj(object_name, schema_hash)
    return false unless schema_hash.is_a? Hash

    ref_hash = schema_hash[:items] || schema_hash
    ref_hash.values.any? { |ref| ref.end_with? "components/schemas/#{object_name}" }
  end

  # schemas that use this schema as a propery/attribute
  def containers_of(schema)
    schema = schema.to_sym
    schema_str_sfx = "/#{schema}"

    containers = []
    @api_definition[:components][:schemas].each do |sch_name, sch_def|
      next if sch_name == schema
      next unless sch_def[:properties]

      sch_def[:properties].each do |_propname, propdef|
        if propdef[:$ref]
          containers << sch_name if propdef[:$ref]&.end_with? schema_str_sfx
        elsif propdef.dig :items, :$ref
          containers << sch_name if propdef[:items][:$ref]&.end_with? schema_str_sfx
        end # if
      end # each prop
    end # each schema
    containers.compact!
    containers.map! { |c| "- Jamf::#{OAPIOBJECT_NAMESPACE}::#{c}" }
    "#  #{containers.join "\n    #  "}"
  end

  # schemas used by this schema as a properly/attribute
  def sub_schemas_of(schema)
    schema = schema.to_sym
    return '#' unless @api_definition[:components][:schemas][schema][:properties]

    subschemas = []
    @api_definition[:components][:schemas][schema][:properties].each do |_propname, propdef|
      if propdef[:$ref]
        subschemas << propdef[:$ref].split('/').last
      elsif propdef.dig :items, :$ref
        subschemas << propdef[:items][:$ref].split('/').last
      end # if
    end # each

    subschemas.compact!
    subschemas.map! { |ss| "- Jamf::#{OAPIOBJECT_NAMESPACE}::#{ss}" }
    "#  #{subschemas.join "\n    #  "}"
  end

  # class_name is a symbol like :ComputerInventoryCollectionSettings
  # object_schema is a hash with at least a :type key
  ##############################
  def class_file_contents(class_name, object_schema)
    privs = privs_for_object class_name

    enum_consts = []

    oapi_properties_const =
      # This schema just defines a top-level enum
      # so it only has one property 'value' which uses the enum
      if object_schema[:enum]
        oapi_properties_const_for_non_object(class_name, object_schema, enum_consts)

      # This schema defines a 'subclass' of another object
      elsif object_schema[:allOf] || object_schema[:oneOf]
        oapi_properties_const_for_sub_object(class_name, object_schema, enum_consts)

      elsif object_schema[:type] == 'object'
        properties_const(class_name, object_schema, enum_consts)

      # This schema defines a non-object, like an array or an integer
      # Like the top level enums, its class will have only one property 'value'
      # which will contain the non-object value
      else
        oapi_properties_const_for_non_object(class_name, object_schema, enum_consts)
      end

    return if oapi_properties_const.nil? && enum_consts.empty?

    contents = OAPIOBJECT_FILE_TEMPLATE.gsub JAMF_PRO_VERSION_PLACEHOLDER, jamf_pro_version

    contents.gsub! OAPIOBJECT_SUBCLASS_NAME_PLACEHOLDER, class_name.to_s

    oapi_desc =
      if object_schema[:description]
        "# Description of this class from the OAPI Schema:\n    #   #{object_schema[:description]}"
      else
        '#'
      end
    contents.gsub! OAPI_DESC_PLACEHOLDER, oapi_desc

    contents.gsub! CONTAINERS_PLACEHOLDER, containers_of(class_name)
    contents.gsub! SUB_MODELS_PLACEHOLDER, sub_schemas_of(class_name)
    contents.gsub! PRIVS_PLACEHOLDER, privs
    contents.gsub! OAPIOBJECT_SUBCLASS_NAME_PLACEHOLDER, class_name.to_s
    contents.gsub! OAPI_PROPERTIES_CONST_PLACEHOLDER, oapi_properties_const

    enum_code =
      if enum_consts.empty?
        ''
      else
        "# Enums used by this class or others\n\n      #{enum_consts.join("\n\n      ")}"
      end
    contents.gsub! ENUM_CONSTS_PLACEHOLDER, enum_code

    contents
  end # def object_model_constant

  # This schema defines a non-object at the top level, e.g.
  # a string, array, integer, or an enum of some kind.
  # The OAPI_PROPERTIES will difine one property: 'value'
  # which will contain the value of the non-object.
  ##################################
  def oapi_properties_const_for_non_object(class_name, object_schema, enum_consts)
    schema_to_parse = {
      type: 'object',
      properties: {
        value: object_schema
      }
    }
    properties_const(class_name, schema_to_parse, enum_consts)
  end

  # This schema defines a 'subclass' of another object
  ##################################
  def oapi_properties_const_for_sub_object(class_name, object_schema, enum_consts)
    unless object_schema[:allOf] || object_schema[:oneOf]
      puts "WARNING: object schema in #{class_name} has no 'allOf' or 'oneOf'"
      return
    end

    merges = []
    const = +"#{OAPI_PROPERTIES_CONST_NAME} = {"

    parent_object = object_schema[:allOf] || object_schema[:oneOf]

    parent_object.each do |item|
      # this item of allOf points to the parent-object
      # We will merge its OAPI_PROPERTIES constant with the one for
      # this object
      if item[:$ref]
        merged_model_name = item[:$ref].split('/').last
        merges << "Jamf::#{OAPIOBJECT_NAMESPACE}::#{merged_model_name}::#{OAPI_PROPERTIES_CONST_NAME}"
        puts "  Merging properties from #{merged_model_name}"

      # this item of allOf or oneOf is the schema for the sub-object
      else
        const << const_from_properties(item, enum_consts)
      end
    end

    # Add the end of the const definition
    const << "\n      }"
    merges.each { |m| const << ".merge(#{m})" }
    const << " # end #{OAPI_PROPERTIES_CONST_NAME}"
    const
  end

  # This is an 'object'
  ##############################
  def properties_const(class_name, object_schema, enum_consts)
    unless object_schema[:properties]
      puts "WARNING: object schema in #{class_name} has no properties"
      return
    end

    const = +"#{OAPI_PROPERTIES_CONST_NAME} = {"
    const << const_from_properties(object_schema, enum_consts)
    const << "\n      } # end #{OAPI_PROPERTIES_CONST_NAME}"
    const
  end

  ########################
  def const_from_properties(object_schema, enum_consts)
    const_def = []
    const_def << ''
    const_def << ''

    attr_defs = []
    required_attrs = object_schema[:required] || []
    properties = object_schema[:properties] || []

    properties.each do |attr, deets|
      attr_defs << object_property_to_attr_def(attr, deets, required_attrs, enum_consts)
    end # properties.each do |attr, deets|

    const_def << attr_defs.join(",\n\n")
    const_def << ''
    const_def.join("\n")
  end # def object_model_constant

  ##############################
  def object_property_to_attr_def(attr, deets, required_attrs, enum_consts)
    # if this propery merely refers to some other schema, we that as its deets
    # e.g.
    # #  :$ref: "#/components/schemas/ComputerPartitionFileVault2State"

    # if deets.keys == [:$ref]
    #   ref = deets[:$ref]
    #   digpath = ref.split('/').map(&:to_sym)
    #   digpath.shift
    #   deets = @api_definition.dig *digpath
    # end

    attr_def = []
    yard_ro = deets[:readOnly] ? +' [r]' : +''
    yard_return = yard_return_class_from_type(deets)

    enum_const_name = nil
    if deets[:enum]
      enum_const_name = +"#{const_name_from_object_name(attr)}#{ENUM_CONST_SUFFIX}"
      enum_const = +"#{enum_const_name} = [\n        "
      enum_const << deets[:enum].map { |e| "'#{e}'" }.join(",\n        ")
      enum_const << "\n      ]"
      enum_consts << enum_const
    end

    if deets[:description]
      desc = deets[:description].chomp.split "\n"
      desc.each { |line| attr_def << "        # #{line}" }
    end

    attr_def << +"        # @!attribute#{yard_ro} #{attr}"
    attr_def << +"        #   @return [#{yard_return}]"
    attr_def << +"        #{attr}: {"
    attr_def << +"          class: #{attr == :id ? ':j_id' : class_from_type(deets)},"
    attr_def << +'          required: true,' if required_attrs.include? attr.to_s
    attr_def << +'          nil_ok: true,' if deets[:nullable]
    attr_def << +'          identifier: :primary,' if attr == :id
    attr_def << +"          format: '#{deets[:format]}'," if deets[:format]
    attr_def << +'          readonly: true,' if deets[:readOnly]
    attr_def << +'          writeonly: true,' if deets[:writeOnly]
    attr_def << +'          multi: true,' if deets[:type] == 'array'
    attr_def << +"          enum: #{enum_const_name}," if enum_const_name

    attr_def << +"          minimum: #{deets[:minimum]}," if deets[:minimum]
    attr_def << +'          exclusive_minimum: true,' if deets[:exclusiveMinimum]
    attr_def << +"          maximum: #{deets[:maximum]}," if deets[:maximum]
    attr_def << +'          exclusive_maximum: true,' if deets[:exclusiveMaximum]
    attr_def << +"          multiple_of: #{deets[:multipleOf]}," if deets[:multipleOf]

    attr_def << +"          pattern: Regexp.new('#{deets[:pattern]}')," if deets[:pattern]
    attr_def << +"          min_length: #{deets[:minLength]}," if deets[:minLength]
    attr_def << +"          max_length: #{deets[:maxLength]}," if deets[:maxLength]

    attr_def << +"          min_items: #{deets[:minItems]}," if deets[:minItems]
    attr_def << +"          max_items: #{deets[:maxItems]}," if deets[:maxItems]
    attr_def << +'          unique_items: true,' if deets[:uniqueItems]

    attr_def.last.chomp! ','
    attr_def << +'        }'
    attr_def.join("\n")
  end

  ##############################
  def class_from_type(deets)
    return "Jamf::#{OAPIOBJECT_NAMESPACE}::#{deets[:$ref].split('/').last}" if deets[:$ref]

    case deets[:type]
    when 'string'
      # Not all Timestamp Strings in the schema are properly marked as 'format: date-time'
      # But we can still catch any that have an example that matches this Regexp
      is_datetime = deets[:format] == DATE_TIME_FORMAT || deets[:example].to_s =~ DATE_TIME_EXAMPLE_RE
      is_datetime ? 'Jamf::Timestamp' : ':string'
    when 'integer'
      ':integer'
    when 'number'
      ':number'
    when 'boolean'
      ':boolean'
    when 'array'
      class_from_type(deets[:items])
    when 'object'
      ':hash'
    end # case
  end

  ##############################
  def yard_return_class_from_type(deets)
    return "Jamf::#{OAPIOBJECT_NAMESPACE}::#{deets[:$ref].split('/').last}" if deets[:$ref]

    case deets[:type]
    when 'string'
      deets[:format] == 'date-time' ? 'Jamf::Timestamp' : 'String'
    when 'integer'
      'Integer'
    when 'number'
      'Float'
    when 'boolean'
      'Boolean'
    when 'array'
      "Array<#{yard_return_class_from_type(deets[:items])}>"
    when 'object'
      val_type =
        if deets.dig :additionalProperties, :type
          puts '>>>>>'
          puts deets
          puts '>>>>>'
          "{Symbol: #{yard_return_class_from_type(deets[:additionalProperties])} }"
        else
          '{Symbol: Object}'
        end
      "Hash#{val_type}"
    end # case
  end

end # class App

begin
  App.new.run
ensure
  if App::JAMF_PRO_ACCESS_FILE.file?
    puts
    puts '***** WARNING ******'
    puts "Be sure to delete #{App::JAMF_PRO_ACCESS_FILE}"
    puts "if you're done using this tool for a while"
    puts '***** WARNING ******'
  end
end
